security:
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        users_in_memory: { memory: null }
        app_user_provider:
            entity:
                class: App\Entity\User\User
    firewalls:
        login:
            pattern: ^/api/login
            stateless: true
            provider: app_user_provider
            entry_point: jwt
            json_login:
                check_path: /api/login
                username_path: email
                password_path: password
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
            jwt: ~
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        api:
            provider: app_user_provider
            pattern: ^/api
            stateless: true
            entry_point: jwt
            jwt: ~
            refresh_jwt:
                check_path: api_refresh_token
                provider: app_user_provider

        main:
            lazy: true
            provider: app_user_provider
            custom_authenticator: App\Security\AppAdminAuthenticator
            logout:
                path: app_admin_logout


            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/login, roles: PUBLIC_ACCESS }
        - { path: ^/api/doc, roles: PUBLIC_ACCESS }
        - { path: ^/api/organization-type/get-collection, roles: PUBLIC_ACCESS }
        - { path: ^/api/messenger/get-collection, roles: PUBLIC_ACCESS }
        - { path: ^/api/country/get-collection, roles: PUBLIC_ACCESS }
        - { path: ^/api/(login|token/refresh|user/password/recovery), roles: PUBLIC_ACCESS }
        - { path: ^/api/register, roles: PUBLIC_ACCESS }
        - { path: ^/api/product/get-collection, roles: PUBLIC_ACCESS }
        - { path: ^/api/product/get, roles: PUBLIC_ACCESS }
        - { path: ^/api/product/search, roles: PUBLIC_ACCESS }
        - { path: ^/api,       roles: [ROLE_USER] }
        - { host: admin.test.bulat.store, path: ^/,       roles: [ROLE_ADMIN, ROLE_SUPER_ADMIN] }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
